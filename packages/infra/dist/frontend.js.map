{"version":3,"file":"frontend.js","sourceRoot":"","sources":["../src/frontend.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  aws_certificatemanager as acm,\n  aws_cloudfront as cloudfront,\n  aws_cloudfront_origins as origins,\n  aws_route53 as route53,\n  aws_route53_targets as targets,\n  aws_s3 as s3,\n  aws_wafv2 as wafv2,\n  Duration,\n  RemovalPolicy,\n} from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport { MedplumInfraConfig } from './config';\nimport { awsManagedRules } from './waf';\n\n/**\n * Static app infrastructure, which deploys app content to an S3 bucket.\n *\n * The app redirects from HTTP to HTTPS, using a CloudFront distribution,\n * Route53 alias record, and ACM certificate.\n */\nexport class FrontEnd extends Construct {\n  constructor(parent: Construct, config: MedplumInfraConfig) {\n    super(parent, 'FrontEnd');\n\n    const zone = route53.HostedZone.fromLookup(this, 'Zone', {\n      domainName: config.domainName,\n    });\n\n    // S3 bucket\n    const appBucket = new s3.Bucket(this, 'AppBucket', {\n      bucketName: config.appDomainName,\n      publicReadAccess: false,\n      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,\n      removalPolicy: RemovalPolicy.DESTROY,\n      encryption: s3.BucketEncryption.S3_MANAGED,\n      enforceSSL: true,\n    });\n\n    // HTTP response headers policy\n    const responseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n      securityHeadersBehavior: {\n        contentSecurityPolicy: {\n          contentSecurityPolicy: [\n            `default-src 'none'`,\n            `base-uri 'self'`,\n            `child-src 'self'`,\n            `connect-src 'self' ${config.apiDomainName} *.google.com`,\n            `font-src 'self' fonts.gstatic.com`,\n            `form-action 'self' *.gstatic.com *.google.com`,\n            `frame-ancestors 'none'`,\n            `frame-src 'self' *.medplum.com *.gstatic.com *.google.com`,\n            `img-src 'self' data: ${config.storageDomainName} *.gstatic.com *.google.com *.googleapis.com`,\n            `manifest-src 'self'`,\n            `media-src 'self' ${config.storageDomainName}`,\n            `script-src 'self' *.medplum.com *.gstatic.com *.google.com`,\n            `style-src 'self' 'unsafe-inline' *.medplum.com *.gstatic.com *.google.com`,\n            `worker-src 'self' blob: *.gstatic.com *.google.com`,\n            `upgrade-insecure-requests`,\n          ].join('; '),\n          override: true,\n        },\n        contentTypeOptions: { override: true },\n        frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n        strictTransportSecurity: {\n          accessControlMaxAge: Duration.seconds(63072000),\n          includeSubdomains: true,\n          override: true,\n        },\n        xssProtection: {\n          protection: true,\n          modeBlock: true,\n          override: true,\n        },\n      },\n    });\n\n    // WAF\n    const waf = new wafv2.CfnWebACL(this, 'FrontEndWAF', {\n      defaultAction: { allow: {} },\n      scope: 'CLOUDFRONT',\n      name: `${config.stackName}-FrontEndWAF`,\n      rules: awsManagedRules,\n      visibilityConfig: {\n        cloudWatchMetricsEnabled: true,\n        metricName: `${config.stackName}-FrontEndWAF-Metric`,\n        sampledRequestsEnabled: false,\n      },\n    });\n\n    // API Origin Cache Policy\n    const apiOriginCachePolicy = new cloudfront.CachePolicy(this, 'ApiOriginCachePolicy', {\n      cachePolicyName: `${config.stackName}-ApiOriginCachePolicy`,\n      cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n      headerBehavior: cloudfront.CacheHeaderBehavior.allowList(\n        'Authorization',\n        'Content-Encoding',\n        'Content-Type',\n        'If-None-Match',\n        'Origin',\n        'Referer',\n        'User-Agent',\n        'X-Medplum'\n      ),\n      queryStringBehavior: cloudfront.CacheQueryStringBehavior.all(),\n    });\n\n    // CloudFront distribution\n    const distribution = new cloudfront.Distribution(this, 'AppDistribution', {\n      defaultRootObject: 'index.html',\n      defaultBehavior: {\n        origin: new origins.S3Origin(appBucket),\n        responseHeadersPolicy,\n        viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n      },\n      additionalBehaviors: {\n        '/api/*': {\n          origin: new origins.HttpOrigin(config.apiDomainName),\n          allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n          cachePolicy: apiOriginCachePolicy,\n          viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n        },\n      },\n      certificate: acm.Certificate.fromCertificateArn(this, 'AppCertificate', config.appSslCertArn),\n      domainNames: [config.appDomainName],\n      errorResponses: [\n        {\n          httpStatus: 403,\n          responseHttpStatus: 200,\n          responsePagePath: '/index.html',\n        },\n        {\n          httpStatus: 404,\n          responseHttpStatus: 200,\n          responsePagePath: '/index.html',\n        },\n      ],\n      webAclId: waf.attrArn,\n    });\n\n    // Route53 alias record for the CloudFront distribution\n    const record = new route53.ARecord(this, 'AppAliasRecord', {\n      recordName: config.appDomainName,\n      target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n      zone,\n    });\n\n    // Debug\n    console.log('ARecord', record.domainName);\n  }\n}\n"]}