{"version":3,"file":"storage.js","sourceRoot":"","sources":["../src/storage.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  aws_certificatemanager as acm,\n  aws_cloudfront as cloudfront,\n  aws_cloudfront_origins as origins,\n  aws_route53 as route53,\n  aws_route53_targets as targets,\n  aws_s3 as s3,\n  aws_wafv2 as wafv2,\n  Duration,\n} from 'aws-cdk-lib';\nimport { ServerlessClamscan } from 'cdk-serverless-clamscan';\nimport { Construct } from 'constructs';\nimport { MedplumInfraConfig } from './config';\nimport { awsManagedRules } from './waf';\n\n/**\n * Binary storage bucket and CloudFront distribution.\n */\nexport class Storage extends Construct {\n  constructor(parent: Construct, config: MedplumInfraConfig) {\n    super(parent, 'Storage');\n\n    const zone = route53.HostedZone.fromLookup(this, 'Zone', {\n      domainName: config.domainName,\n    });\n\n    // S3 bucket\n    const storageBucket = new s3.Bucket(this, 'StorageBucket', {\n      bucketName: config.storageBucketName,\n      publicReadAccess: false,\n      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,\n      encryption: s3.BucketEncryption.S3_MANAGED,\n      enforceSSL: true,\n    });\n\n    if (config.clamscanEnabled) {\n      // ClamAV serverless scan\n      const sc = new ServerlessClamscan(this, 'ServerlessClamscan', {\n        defsBucketAccessLogsConfig: {\n          logsBucket: s3.Bucket.fromBucketName(this, 'LoggingBucket', config.clamscanLoggingBucket),\n          logsPrefix: config.clamscanLoggingPrefix,\n        },\n      });\n      sc.addSourceBucket(storageBucket);\n    }\n\n    // Public key in PEM format\n    const publicKey = new cloudfront.PublicKey(this, 'StoragePublicKey', {\n      encodedKey: config.storagePublicKey,\n    });\n\n    // Authorized key group for presigned URLs\n    const keyGroup = new cloudfront.KeyGroup(this, 'StorageKeyGroup', {\n      items: [publicKey],\n    });\n\n    // HTTP response headers policy\n    const responseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n      securityHeadersBehavior: {\n        contentSecurityPolicy: {\n          contentSecurityPolicy:\n            \"default-src 'none'; base-uri 'none'; form-action 'none'; frame-ancestors *.medplum.com;\",\n          override: true,\n        },\n        contentTypeOptions: { override: true },\n        frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n        referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n        strictTransportSecurity: {\n          accessControlMaxAge: Duration.seconds(63072000),\n          includeSubdomains: true,\n          override: true,\n        },\n        xssProtection: {\n          protection: true,\n          modeBlock: true,\n          override: true,\n        },\n      },\n    });\n\n    // WAF\n    const waf = new wafv2.CfnWebACL(this, 'StorageWAF', {\n      defaultAction: { allow: {} },\n      scope: 'CLOUDFRONT',\n      name: `${config.stackName}-StorageWAF`,\n      rules: awsManagedRules,\n      visibilityConfig: {\n        cloudWatchMetricsEnabled: true,\n        metricName: `${config.stackName}-StorageWAF-Metric`,\n        sampledRequestsEnabled: false,\n      },\n    });\n\n    // CloudFront distribution\n    const distribution = new cloudfront.Distribution(this, 'StorageDistribution', {\n      defaultBehavior: {\n        origin: new origins.S3Origin(storageBucket),\n        responseHeadersPolicy,\n        viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n        trustedKeyGroups: [keyGroup],\n      },\n      certificate: acm.Certificate.fromCertificateArn(this, 'StorageCertificate', config.storageSslCertArn),\n      domainNames: [config.storageDomainName],\n      webAclId: waf.attrArn,\n    });\n\n    // Route53 alias record for the CloudFront distribution\n    const record = new route53.ARecord(this, 'StorageAliasRecord', {\n      recordName: config.storageDomainName,\n      target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n      zone,\n    });\n\n    // Debug\n    console.log('ARecord', record.domainName);\n  }\n}\n"]}