{"version":3,"file":"backend.js","sourceRoot":"","sources":["../src/backend.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  aws_ec2 as ec2,\n  aws_ecs as ecs,\n  aws_elasticache as elasticache,\n  aws_elasticloadbalancingv2 as elbv2,\n  aws_iam as iam,\n  aws_logs as logs,\n  aws_rds as rds,\n  aws_route53 as route53,\n  aws_route53_targets as targets,\n  aws_s3 as s3,\n  aws_secretsmanager as secretsmanager,\n  aws_ssm as ssm,\n  aws_wafv2 as wafv2,\n  Duration,\n  RemovalPolicy,\n} from 'aws-cdk-lib';\nimport { Repository } from 'aws-cdk-lib/aws-ecr';\nimport { Construct } from 'constructs';\nimport { MedplumInfraConfig } from './config';\nimport { awsManagedRules } from './waf';\n\n/**\n * Based on: https://github.com/aws-samples/http-api-aws-fargate-cdk/blob/master/cdk/singleAccount/lib/fargate-vpclink-stack.ts\n *\n * RDS config: https://docs.aws.amazon.com/cdk/api/latest/docs/aws-rds-readme.html\n */\nexport class BackEnd extends Construct {\n  constructor(scope: Construct, config: MedplumInfraConfig) {\n    super(scope, 'BackEnd');\n\n    const name = config.name;\n\n    // VPC Flow Logs\n    const vpcFlowLogs = new logs.LogGroup(this, 'VpcFlowLogs', {\n      logGroupName: '/medplum/flowlogs/' + name,\n      removalPolicy: RemovalPolicy.DESTROY,\n    });\n\n    // VPC\n    const vpc = new ec2.Vpc(this, 'VPC', {\n      maxAzs: config.maxAzs,\n      flowLogs: {\n        cloudwatch: {\n          destination: ec2.FlowLogDestination.toCloudWatchLogs(vpcFlowLogs),\n          trafficType: ec2.FlowLogTrafficType.ALL,\n        },\n      },\n    });\n\n    // Bot Lambda Role\n    const botLambdaRole = new iam.Role(this, 'BotLambdaRole', {\n      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n    });\n\n    // RDS\n    const rdsCluster = new rds.DatabaseCluster(this, 'DatabaseCluster', {\n      engine: rds.DatabaseClusterEngine.auroraPostgres({\n        version: rds.AuroraPostgresEngineVersion.VER_12_9,\n      }),\n      credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'),\n      defaultDatabaseName: 'medplum',\n      storageEncrypted: true,\n      instances: config.rdsInstances,\n      instanceProps: {\n        vpc: vpc,\n        vpcSubnets: {\n          subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,\n        },\n      },\n      backup: {\n        retention: Duration.days(7),\n      },\n      cloudwatchLogsExports: ['postgresql'],\n    });\n\n    // Redis\n    // Important: For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup.\n    const redisSubnetGroup = new elasticache.CfnSubnetGroup(this, 'RedisSubnetGroup', {\n      description: 'Redis Subnet Group',\n      subnetIds: vpc.privateSubnets.map((subnet) => subnet.subnetId),\n    });\n\n    const redisSecurityGroup = new ec2.SecurityGroup(this, 'RedisSecurityGroup', {\n      vpc,\n      description: 'Redis Security Group',\n      allowAllOutbound: false,\n    });\n\n    const redisPassword = new secretsmanager.Secret(this, 'RedisPassword', {\n      generateSecretString: {\n        secretStringTemplate: '{}',\n        generateStringKey: 'password',\n        excludeCharacters: '@%*()_+=`~{}|[]\\\\:\";\\'?,./',\n      },\n    });\n\n    const redisCluster = new elasticache.CfnReplicationGroup(this, 'RedisCluster', {\n      engine: 'Redis',\n      engineVersion: '6.x',\n      cacheNodeType: 'cache.t2.medium',\n      replicationGroupDescription: 'RedisReplicationGroup',\n      authToken: redisPassword.secretValueFromJson('password').toString(),\n      transitEncryptionEnabled: true,\n      atRestEncryptionEnabled: true,\n      multiAzEnabled: true,\n      cacheSubnetGroupName: redisSubnetGroup.ref,\n      numNodeGroups: 1,\n      replicasPerNodeGroup: 1,\n      securityGroupIds: [redisSecurityGroup.securityGroupId],\n    });\n    redisCluster.node.addDependency(redisPassword);\n\n    const redisSecrets = new secretsmanager.Secret(this, 'RedisSecrets', {\n      generateSecretString: {\n        secretStringTemplate: JSON.stringify({\n          host: redisCluster.attrPrimaryEndPointAddress,\n          port: redisCluster.attrPrimaryEndPointPort,\n          password: redisPassword.secretValueFromJson('password').toString(),\n          tls: {},\n        }),\n        generateStringKey: 'unused',\n      },\n    });\n    redisSecrets.node.addDependency(redisPassword);\n    redisSecrets.node.addDependency(redisCluster);\n\n    // ECS Cluster\n    const cluster = new ecs.Cluster(this, 'Cluster', {\n      vpc: vpc,\n    });\n\n    // Task Policies\n    const taskRolePolicies = new iam.PolicyDocument({\n      statements: [\n        // CloudWatch Logs: Create streams and put events\n        new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: ['logs:CreateLogStream', 'logs:PutLogEvents'],\n          resources: ['arn:aws:logs:*'],\n        }),\n\n        // Secrets Manager: Read only access to secrets\n        // https://docs.aws.amazon.com/mediaconnect/latest/ug/iam-policy-examples-asm-secrets.html\n        new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: [\n            'secretsmanager:GetResourcePolicy',\n            'secretsmanager:GetSecretValue',\n            'secretsmanager:DescribeSecret',\n            'secretsmanager:ListSecrets',\n            'secretsmanager:ListSecretVersionIds',\n          ],\n          resources: ['arn:aws:secretsmanager:*'],\n        }),\n\n        // Parameter Store: Read only access\n        // https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-access.html\n        new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: ['ssm:GetParametersByPath', 'ssm:GetParameters', 'ssm:GetParameter', 'ssm:DescribeParameters'],\n          resources: ['arn:aws:ssm:*'],\n        }),\n\n        // SES: Send emails\n        // https://docs.aws.amazon.com/ses/latest/dg/sending-authorization-policy-examples.html\n        new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: ['ses:SendEmail', 'ses:SendRawEmail'],\n          resources: ['arn:aws:ses:*'],\n        }),\n\n        // S3: Read and write access to buckets\n        // https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazons3.html\n        new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: ['s3:ListBucket', 's3:GetObject', 's3:PutObject', 's3:DeleteObject'],\n          resources: ['arn:aws:s3:::*'],\n        }),\n\n        // IAM: Pass role to innvoke lambda functions\n        // https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html\n        new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: ['iam:ListRoles', 'iam:GetRole', 'iam:PassRole'],\n          resources: [botLambdaRole.roleArn],\n        }),\n\n        // Lambda: Create, read, update, delete, and invoke functions\n        // https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html\n        new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: [\n            'lambda:CreateFunction',\n            'lambda:GetFunction',\n            'lambda:GetFunctionConfiguration',\n            'lambda:UpdateFunctionCode',\n            'lambda:UpdateFunctionConfiguration',\n            'lambda:ListLayerVersions',\n            'lambda:GetLayerVersion',\n            'lambda:InvokeFunction',\n          ],\n          resources: ['arn:aws:lambda:*'],\n        }),\n      ],\n    });\n\n    // Task Role\n    const taskRole = new iam.Role(this, 'TaskExecutionRole', {\n      assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),\n      description: 'Medplum Server Task Execution Role',\n      inlinePolicies: {\n        TaskExecutionPolicies: taskRolePolicies,\n      },\n    });\n\n    // Task Definitions\n    const taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDefinition', {\n      memoryLimitMiB: config.serverMemory,\n      cpu: config.serverCpu,\n      taskRole: taskRole,\n    });\n\n    // Log Groups\n    const logGroup = new logs.LogGroup(this, 'LogGroup', {\n      logGroupName: '/ecs/medplum/' + name,\n      removalPolicy: RemovalPolicy.DESTROY,\n    });\n\n    const logDriver = new ecs.AwsLogDriver({\n      logGroup: logGroup,\n      streamPrefix: 'Medplum',\n    });\n\n    // Task Containers\n    let serverImage: ecs.ContainerImage | undefined = undefined;\n    // Pull out the image name and tag from the image URI if it's an ECR image\n    const ecrImageUriRegex = new RegExp(\n      `^${config.accountNumber}\\\\.dkr\\\\.ecr\\\\.${config.region}\\\\.amazonaws\\\\.com/(.*)[:@](.*)$`\n    );\n    const nameTagMatches = config.serverImage.match(ecrImageUriRegex);\n    const serverImageName = nameTagMatches?.[1];\n    const serverImageTag = nameTagMatches?.[2];\n    if (serverImageName && serverImageTag) {\n      // Creating an ecr repository image will automatically grant fine-grained permissions to ecs to access the image\n      const ecrRepo = Repository.fromRepositoryArn(\n        this,\n        'ServerImageRepo',\n        `arn:aws:ecr:${config.region}:${config.accountNumber}:repository/${serverImageName}`\n      );\n      serverImage = ecs.ContainerImage.fromEcrRepository(ecrRepo, serverImageTag);\n    } else {\n      // Otherwise, use the standard container image\n      serverImage = ecs.ContainerImage.fromRegistry(config.serverImage);\n    }\n    const serviceContainer = taskDefinition.addContainer('MedplumTaskDefinition', {\n      image: serverImage,\n      command: [`aws:/medplum/${name}/`],\n      logging: logDriver,\n    });\n\n    serviceContainer.addPortMappings({\n      containerPort: config.apiPort,\n      hostPort: config.apiPort,\n    });\n\n    // Security Groups\n    const fargateSecurityGroup = new ec2.SecurityGroup(this, 'ServiceSecurityGroup', {\n      allowAllOutbound: true,\n      securityGroupName: 'MedplumSecurityGroup',\n      vpc: vpc,\n    });\n\n    // Fargate Services\n    const fargateService = new ecs.FargateService(this, 'FargateService', {\n      cluster: cluster,\n      taskDefinition: taskDefinition,\n      assignPublicIp: false,\n      vpcSubnets: {\n        subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,\n      },\n      desiredCount: config.desiredServerCount,\n      securityGroups: [fargateSecurityGroup],\n    });\n\n    // Load Balancer Target Group\n    const targetGroup = new elbv2.ApplicationTargetGroup(this, 'TargetGroup', {\n      vpc: vpc,\n      port: config.apiPort,\n      protocol: elbv2.ApplicationProtocol.HTTP,\n      healthCheck: {\n        path: '/healthcheck',\n        interval: Duration.seconds(30),\n        timeout: Duration.seconds(3),\n        healthyThresholdCount: 2,\n        unhealthyThresholdCount: 5,\n      },\n      targets: [fargateService],\n    });\n\n    // Load Balancer\n    const loadBalancer = new elbv2.ApplicationLoadBalancer(this, 'LoadBalancer', {\n      vpc: vpc,\n      internetFacing: true,\n      http2Enabled: true,\n    });\n\n    if (config.loadBalancerLoggingEnabled) {\n      // Load Balancer logging\n      loadBalancer.logAccessLogs(\n        s3.Bucket.fromBucketName(this, 'LoggingBucket', config.loadBalancerLoggingBucket),\n        config.loadBalancerLoggingPrefix\n      );\n    }\n\n    // HTTPS Listener\n    // Forward to the target group\n    loadBalancer.addListener('HttpsListener', {\n      port: 443,\n      certificates: [\n        {\n          certificateArn: config.apiSslCertArn,\n        },\n      ],\n      sslPolicy: elbv2.SslPolicy.FORWARD_SECRECY_TLS12_RES_GCM,\n      defaultAction: elbv2.ListenerAction.forward([targetGroup]),\n    });\n\n    // WAF\n    const waf = new wafv2.CfnWebACL(this, 'BackEndWAF', {\n      defaultAction: { allow: {} },\n      scope: 'REGIONAL',\n      name: `${config.stackName}-BackEndWAF`,\n      rules: awsManagedRules,\n      visibilityConfig: {\n        cloudWatchMetricsEnabled: true,\n        metricName: `${config.stackName}-BackEndWAF-Metric`,\n        sampledRequestsEnabled: false,\n      },\n    });\n\n    // Create an association between the load balancer and the WAF\n    const wafAssociation = new wafv2.CfnWebACLAssociation(this, 'LoadBalancerAssociation', {\n      resourceArn: loadBalancer.loadBalancerArn,\n      webAclArn: waf.attrArn,\n    });\n\n    // Grant RDS access to the fargate group\n    rdsCluster.connections.allowDefaultPortFrom(fargateSecurityGroup);\n\n    // Grant Redis access to the fargate group\n    redisSecurityGroup.addIngressRule(fargateSecurityGroup, ec2.Port.tcp(6379));\n\n    // Route 53\n    const zone = route53.HostedZone.fromLookup(this, 'Zone', {\n      domainName: config.domainName,\n    });\n\n    // Route53 alias record for the load balancer\n    const record = new route53.ARecord(this, 'LoadBalancerAliasRecord', {\n      recordName: config.apiDomainName,\n      target: route53.RecordTarget.fromAlias(new targets.LoadBalancerTarget(loadBalancer)),\n      zone: zone,\n    });\n\n    // SSM Parameters\n    const databaseSecrets = new ssm.StringParameter(this, 'DatabaseSecretsParameter', {\n      tier: ssm.ParameterTier.STANDARD,\n      parameterName: `/medplum/${name}/DatabaseSecrets`,\n      description: 'Database secrets ARN',\n      stringValue: rdsCluster.secret?.secretArn as string,\n    });\n\n    const redisSecretsParameter = new ssm.StringParameter(this, 'RedisSecretsParameter', {\n      tier: ssm.ParameterTier.STANDARD,\n      parameterName: `/medplum/${name}/RedisSecrets`,\n      description: 'Redis secrets ARN',\n      stringValue: redisSecrets.secretArn,\n    });\n\n    const botLambdaRoleParameter = new ssm.StringParameter(this, 'BotLambdaRoleParameter', {\n      tier: ssm.ParameterTier.STANDARD,\n      parameterName: `/medplum/${name}/botLambdaRoleArn`,\n      description: 'Bot lambda execution role ARN',\n      stringValue: botLambdaRole.roleArn,\n    });\n\n    // Debug\n    console.log('ARecord', record.domainName);\n    console.log('DatabaseSecretsParameter', databaseSecrets.parameterArn);\n    console.log('RedisSecretsParameter', redisSecretsParameter.parameterArn);\n    console.log('RedisCluster', redisCluster.attrPrimaryEndPointAddress);\n    console.log('BotLambdaRole', botLambdaRoleParameter.stringValue);\n    console.log('WAF', waf.attrArn);\n    console.log('WAF Association', wafAssociation.node.id);\n  }\n}\n"]}